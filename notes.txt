why python ? 

easy 
expressive 
line by line 
modules 
open source - large community
HL
OOP POP 
-------

variable -> it is used to store values 
data type -> indicator -> what type of data you are going to store 

int a;
float v; 


variable -> Object -> value 
identifiers -> vairable function class object 

conventions ->
    class ->  Employee 
              TempEmployee 
    method -> add() 
              addSalary()
    variable -> salary 
                totalSalary  
    private variable -> 

Rules for identifiers:- 
    1) contains Alphabet [A-Z a-z] , underscore [ _ ]  , digit [ 0 - 9 ]
        max , maxSalary , salary2022 , temp_salary 
        max@salary -> not possible  

    2) first character must not be digit. 
        2022salary -> wrong 
        1max -> wrong 
        salary2022 -> correct
        max1 -> correct 
    3) no special symbols or space allowed , you can use only underscore 
        max@salary -> wrong 
        max salary -> wrong 
        max_salary -> correct 
    4) you can't use keyword. 
        if elif 
    5) no limitation in length. 


     age -> 
     salary1 -> 
     max_age -> 
     _min_max_age -> 
     print$salary -> invalid 
      for -> invalid 



--------------------------------------------

casting -> converting your variable into 1 type to another type 

int() -> data -> integer 

int(x) -> x is converted into integer 

float() 
str() 



take three numbers from user and perform 
addition sub and multiplication 



1 addition
2 sub
3 multiplication

enter your choice 

1



take a number from user and check 
is positive or negative 

if num > 0:
    print("num is +")
elif num < 0:
    print("num is - ")
else:
    print("num is 0")


if a>b:
    print("A is max")
else:
    print("B is max")

--------------------------------------------------------
comments in pytho ? 

single line comments -> # 
multiline -> 
        """ 
            multiline comment 

        """

        '''
            multiline comment 
        '''

--------------------------------------------------------


Loops in Python -> 

    1) while 
    2) for 

    while expression:
        code1  
        code2
    print("")

    expression -> condition -> True False 

    5 time -> 
        1) start 
        2) increment/decrement 
        3) condition 

    for localVariable in someCollection:
        code1
        code2


take number from user and print mulitplication table of that number
e.g 
enter number 
10 

10 * 1 = 10
10 * 2 = 20
..........
10 * 10 = 100 



1
12
123
1234
12345 


loop control Statement -> 
    break
    continue 
    *pass 


for while => terminate -> conidtion False 
    break 

1...10 time
    code -> body -> skip -> 2 3 4 
    continue 

-----------------------------------------------------------------------------
1) take 1 number from user and reverse it.
    num => 2457 
    reverseNum => 7542 
2) Take 1 number from user and check 1st and last digit is same or not. 
    num -> 123 
    not same 
    num -> 1231 
    same 
3)  
    1
    121
    12321
    1234321
    123454321

4)   take 5 numbers from user and perform sum of all numbers 
    num -> 1 
    num -> 2 
    num -> 3
    num -> 4
    num -> 5
    sum -> 15 

5) fibonaci 
        limit -> 13 
    1 1 2 3 5 8 13      
-----------------------------------------------------------------------------


function -> collection of Statement(s) or instruction(s) or block of code 
            which executes line by line and give some output. 
        ->  re-usablity , modularity     

add->
    a = input 
    b = input 
    c = a+b  

1) in built - 

        input()
        str() int() float() 
        print() 

2) user define - 
        def 


    def functionName(argument):
        body - 

        return ; 

#keyword argument
#default argument
#varags 




#keyword argument 
def printMe(name,city,pincode):
    print("name => ",name)
    print("city => ",city)
    print("Pincode => ",pincode)


printMe("ram","ayodhya",380015)
printMe(pincode=12345,name="laxman",city="Ayodhya")


#default argument 

def sqr(num=0):
    print("Sqr => ",num*num)

def add(a,b=2,c,d): ==> Invalid 
    once we add default argument then rest of all argument must have 
    default argument 


def add(a,b=2,c=3,d=2):
    print(a+b+c+d)

sqr(5) # num => 5 
sqr() # num => 0 

print("hi")
print("hellow",end="\t")

add(a=1,c=2,d=3)
add(1,3,4)


#create one function max that accept three arguments and return
max from three args. 
now use that max num in oddEven function that return 1 if number 
is odd and 0 if number is even. 

--------------------------------------------------------------

1) string palindrome 
2) royal EduCation ->swapCase - > ROYAL eDUcATION 
3) RoyalEducation -> rotate 3 -> alEducationRoy 
                     rotate 1 -> oyalEducationR 
                     


--------------------------------------------------------------------
5 , 15 , 50  => 

python sequence class. 

six sequence in python. 

list and tuple 

#how to write custom sort in python for list 



list -> this is the most used data type in python , it stores data item with comma separated between 
        square brackets. 

        no size 


 
List:-> 

    1)  take n numbers from user and find how many palindrome number present in list 
    2)  now remove duplicates from above list 
    3)  take n names from user and sort in ascending order , do not conside case , case insensitive 
        Ram shyam Shyam laxman
        sort -> Ram Shyam shyam laxman 
        case insensitive -> laxman Ram shyam Shyam 



###### tuple ###### 

we can store n number of items in tuple 
#once we define tuple we can't modify value of it. 
#tuple is an ordered 
it stores data item with comma separated between round brackets. 
its only data type / collection in python that is read only. 

data = (1,2,3,4)

print(data)
print(data[0])
data[0] = 20 # not work 


data = (1,2,3,4,5,6,1,2,3,4)

1)create 1 def that accpets list of list [ list contains numbers] and return a list with common number 
list = [ [1,2,3,4] , [1,2,3,4] , [2,3] , [2,3,4,5] ] 
findDiff(list) [2,3]

2) pair the brackets 
    str = "()[]{}"  => valid 
    str = "()" => valid 
    str = "[]" => valid 
    str = "[({})]"=> valid 
    str = "[}]" => invalid 
    str = "}" => invalid 
    str = "(" => invalid 

    def isValid(str):
        return true 
#####

##### Set ####### 
we can store n number itesm in set 

list = [1,2,3]
t = (1,2,3)
s = {1,2,3}

unordered 
can't modify but you can add new item and you can also remove item 
can not allow duplicate

#### disctionary ### 
we can store n number items in disctionary using curly brackets but we have key:value pari in data 

user = {
            "name":"ram",
            "email":"ram@gmail.com",
            "password":"1234"
        }

key is always unique
value can be duplicate 

python-> 3.6 unordered
3.7+ -> ordered 

print(user)
print(user["email"])

user["email"]="Ram123@gmail.com"














