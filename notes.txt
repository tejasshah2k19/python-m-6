why python ? 

easy 
expressive 
line by line 
modules 
open source - large community
HL
OOP POP 
-------

variable -> it is used to store values 
data type -> indicator -> what type of data you are going to store 

int a;
float v; 


variable -> Object -> value 
identifiers -> vairable function class object 

conventions ->
    class ->  Employee 
              TempEmployee 
    method -> add() 
              addSalary()
    variable -> salary 
                totalSalary  
    private variable -> 

Rules for identifiers:- 
    1) contains Alphabet [A-Z a-z] , underscore [ _ ]  , digit [ 0 - 9 ]
        max , maxSalary , salary2022 , temp_salary 
        max@salary -> not possible  

    2) first character must not be digit. 
        2022salary -> wrong 
        1max -> wrong 
        salary2022 -> correct
        max1 -> correct 
    3) no special symbols or space allowed , you can use only underscore 
        max@salary -> wrong 
        max salary -> wrong 
        max_salary -> correct 
    4) you can't use keyword. 
        if elif 
    5) no limitation in length. 


     age -> 
     salary1 -> 
     max_age -> 
     _min_max_age -> 
     print$salary -> invalid 
      for -> invalid 



--------------------------------------------

casting -> converting your variable into 1 type to another type 

int() -> data -> integer 

int(x) -> x is converted into integer 

float() 
str() 



take three numbers from user and perform 
addition sub and multiplication 



1 addition
2 sub
3 multiplication

enter your choice 

1



take a number from user and check 
is positive or negative 

if num > 0:
    print("num is +")
elif num < 0:
    print("num is - ")
else:
    print("num is 0")


if a>b:
    print("A is max")
else:
    print("B is max")

--------------------------------------------------------
comments in pytho ? 

single line comments -> # 
multiline -> 
        """ 
            multiline comment 

        """

        '''
            multiline comment 
        '''

--------------------------------------------------------


Loops in Python -> 

    1) while 
    2) for 

    while expression:
        code1  
        code2
    print("")

    expression -> condition -> True False 

    5 time -> 
        1) start 
        2) increment/decrement 
        3) condition 

    for localVariable in someCollection:
        code1
        code2


take number from user and print mulitplication table of that number
e.g 
enter number 
10 

10 * 1 = 10
10 * 2 = 20
..........
10 * 10 = 100 



1
12
123
1234
12345 


loop control Statement -> 
    break
    continue 
    *pass 


for while => terminate -> conidtion False 
    break 

1...10 time
    code -> body -> skip -> 2 3 4 
    continue 

-----------------------------------------------------------------------------
1) take 1 number from user and reverse it.
    num => 2457 
    reverseNum => 7542 
2) Take 1 number from user and check 1st and last digit is same or not. 
    num -> 123 
    not same 
    num -> 1231 
    same 
3)  
    1
    121
    12321
    1234321
    123454321

4)   take 5 numbers from user and perform sum of all numbers 
    num -> 1 
    num -> 2 
    num -> 3
    num -> 4
    num -> 5
    sum -> 15 

5) fibonaci 
        limit -> 13 
    1 1 2 3 5 8 13      
-----------------------------------------------------------------------------


function -> collection of Statement(s) or instruction(s) or block of code 
            which executes line by line and give some output. 
        ->  re-usablity , modularity     

add->
    a = input 
    b = input 
    c = a+b  

1) in built - 

        input()
        str() int() float() 
        print() 

2) user define - 
        def 


    def functionName(argument):
        body - 

        return ; 

#keyword argument
#default argument
#varags 




#keyword argument 
def printMe(name,city,pincode):
    print("name => ",name)
    print("city => ",city)
    print("Pincode => ",pincode)


printMe("ram","ayodhya",380015)
printMe(pincode=12345,name="laxman",city="Ayodhya")


#default argument 

def sqr(num=0):
    print("Sqr => ",num*num)

def add(a,b=2,c,d): ==> Invalid 
    once we add default argument then rest of all argument must have 
    default argument 


def add(a,b=2,c=3,d=2):
    print(a+b+c+d)

sqr(5) # num => 5 
sqr() # num => 0 

print("hi")
print("hellow",end="\t")

add(a=1,c=2,d=3)
add(1,3,4)


#create one function max that accept three arguments and return
max from three args. 
now use that max num in oddEven function that return 1 if number 
is odd and 0 if number is even. 









